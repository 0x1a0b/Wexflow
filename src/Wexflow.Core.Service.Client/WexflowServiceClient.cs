//------------------------------------------------------------------------------
// <auto-generated>
//     Ce code a été généré par un outil.
//     Version du runtime :2.0.50727.3655
//
//     Les modifications apportées à ce fichier peuvent provoquer un comportement incorrect et seront perdues si
//     le code est régénéré.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Wexflow.Core.Service.Contracts
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WorkflowInfo", Namespace="http://schemas.datacontract.org/2004/07/Wexflow.Core.Service.Contracts")]
    public partial class WorkflowInfo : object, System.Runtime.Serialization.IExtensibleDataObject
    {
        
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        private string DescriptionField;
        
        private int IdField;
        
        private bool IsEnabledField;
        
        private bool IsPausedField;
        
        private bool IsRunningField;
        
        private Wexflow.Core.LaunchType LaunchTypeField;
        
        private string NameField;
        
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData
        {
            get
            {
                return this.extensionDataField;
            }
            set
            {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description
        {
            get
            {
                return this.DescriptionField;
            }
            set
            {
                this.DescriptionField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id
        {
            get
            {
                return this.IdField;
            }
            set
            {
                this.IdField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsEnabled
        {
            get
            {
                return this.IsEnabledField;
            }
            set
            {
                this.IsEnabledField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsPaused
        {
            get
            {
                return this.IsPausedField;
            }
            set
            {
                this.IsPausedField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsRunning
        {
            get
            {
                return this.IsRunningField;
            }
            set
            {
                this.IsRunningField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Wexflow.Core.LaunchType LaunchType
        {
            get
            {
                return this.LaunchTypeField;
            }
            set
            {
                this.LaunchTypeField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name
        {
            get
            {
                return this.NameField;
            }
            set
            {
                this.NameField = value;
            }
        }
    }
}
namespace Wexflow.Core
{
    using System.Runtime.Serialization;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "3.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LaunchType", Namespace="http://schemas.datacontract.org/2004/07/Wexflow.Core")]
    public enum LaunchType : int
    {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Startup = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Trigger = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Periodic = 2,
    }
}


[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://WexflowService/", ConfigurationName="IWexflowService")]
public interface IWexflowService
{
    
    [System.ServiceModel.OperationContractAttribute(Action="http://WexflowService/IWexflowService/Hello", ReplyAction="http://WexflowService/IWexflowService/HelloResponse")]
    string Hello();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://WexflowService/IWexflowService/GetWorkflows", ReplyAction="http://WexflowService/IWexflowService/GetWorkflowsResponse")]
    Wexflow.Core.Service.Contracts.WorkflowInfo[] GetWorkflows();
    
    [System.ServiceModel.OperationContractAttribute(Action="http://WexflowService/IWexflowService/StartWorkflow", ReplyAction="http://WexflowService/IWexflowService/StartWorkflowResponse")]
    void StartWorkflow(int workflowId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://WexflowService/IWexflowService/StopWorkflow", ReplyAction="http://WexflowService/IWexflowService/StopWorkflowResponse")]
    void StopWorkflow(int workflowId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://WexflowService/IWexflowService/SuspendWorkflow", ReplyAction="http://WexflowService/IWexflowService/SuspendWorkflowResponse")]
    void SuspendWorkflow(int workflowId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://WexflowService/IWexflowService/ResumeWorkflow", ReplyAction="http://WexflowService/IWexflowService/ResumeWorkflowResponse")]
    void ResumeWorkflow(int workflowId);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://WexflowService/IWexflowService/GetWorkflow", ReplyAction="http://WexflowService/IWexflowService/GetWorkflowResponse")]
    Wexflow.Core.Service.Contracts.WorkflowInfo GetWorkflow(int workflowId);
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public interface IWexflowServiceChannel : IWexflowService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "3.0.0.0")]
public partial class WexflowServiceClient : System.ServiceModel.ClientBase<IWexflowService>, IWexflowService
{
    
    public WexflowServiceClient()
    {
    }
    
    public WexflowServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public WexflowServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public WexflowServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public WexflowServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    public string Hello()
    {
        return base.Channel.Hello();
    }
    
    public Wexflow.Core.Service.Contracts.WorkflowInfo[] GetWorkflows()
    {
        return base.Channel.GetWorkflows();
    }
    
    public void StartWorkflow(int workflowId)
    {
        base.Channel.StartWorkflow(workflowId);
    }
    
    public void StopWorkflow(int workflowId)
    {
        base.Channel.StopWorkflow(workflowId);
    }
    
    public void SuspendWorkflow(int workflowId)
    {
        base.Channel.SuspendWorkflow(workflowId);
    }
    
    public void ResumeWorkflow(int workflowId)
    {
        base.Channel.ResumeWorkflow(workflowId);
    }
    
    public Wexflow.Core.Service.Contracts.WorkflowInfo GetWorkflow(int workflowId)
    {
        return base.Channel.GetWorkflow(workflowId);
    }
}
